#
# guppy.ldef - language definitions for Guppy
# identifiers must start at the left-margin, indentation is a line-continuation
#

.IDENT		"guppy"
.DESC		"Guppy parallel programming language"
.MAINTAINER	"Fred Barnes <frmb@kent.ac.uk>"
.VERSION	"May 2015"


# sections are used to help front-end units find their definitions

.SECTION "guppy" # {{{: fairly general guppy reductions and other language things

.SYMBOL	">>>"
.SYMBOL "**"
.SYMBOL "++"
.SYMBOL "--"
.SYMBOL "+="
.SYMBOL "-="
.SYMBOL "*="
.SYMBOL "/="
.SYMBOL "\\="
.SYMBOL "<<="
.SYMBOL ">>="
.SYMBOL ">>>="
.SYMBOL "&&="
.SYMBOL "||="
.SYMBOL "&="
.SYMBOL "|="
.SYMBOL "><="
.SYMBOL "++="
.SYMBOL "--="
.SYMBOL "**="

.GRULE	"gup:nullreduce" "N+R-"
.GRULE	"gup:nullpush" "0N-"
.GRULE	"gup:null2push" "0N-0N-"
.GRULE	"gup:nullset" "0R-"

.GRULE	"gup:testtrue" "T*C[TESTTRUE]0R-"
.GRULE	"gup:testfalse" "T*C[TESTFALSE]0R-"

.GRULE	"gup:rewindlexer" "T*"

.RFUNC	"Rguppy:checkfixio" "guppy_reduce_checkfixio"

# .TNODE directives describe the parse-tree, kind-of

#{{{  declarations and related nodes

# guppy:rawnamenode		(0,0,1)

.TNODE	"guppy:rawnamenode" (0,0,1) "name-hook"
	INVALID AFTER "scope"
.TNODE	"guppy:namenode" (0,1,0) "name"
	INVALID BEFORE "scope"


#}}}

# }}}

.SECTION "guppy-postprod" # {{{: top-level grammar, kind-of

.TABLE	"guppy:procstart +:= [ 0 guppy:primproc 1 ] [ 0 guppy:cnode 1 ] [ 0 guppy:cflow 1 ] [ 1 {<gup:nullreduce>} -* ]"
	"[ 0 +Name 2 ] [ 2 +Name 3 ] [ 3 {<gup:rewindlexer>} -* <guppy:namenamestartproc> ]"
	"[ 2 -* 4 ] [ 4 {<gup:rewindlexer>} -* <guppy:namestartproc> ]"

.TABLE	"guppy:descriptor ::= [ 0 @define 1 ] [ 1 guppy:definedecl 2 ] [ 2 @@= 3 ] [ 2 Newline 5 ] [ 3 guppy:literal 4 ] [ 4 {<gup:extdeclreduce>} -* ]"
	"[ 5 {<gup:libdescreduce>} -* ]"

#.BNF	"guppy:procstart +:= ( guppy:primproc | guppy:cnode ) {<gup:nullreduce>}"

# definitions that start with 'define' use "guppy:definedecl" ('define' already eaten),
# others use "guppy:otherdecl".

.TABLE	"guppy:decl +:= [ 0 @define 1 ] [ 1 -* <guppy:definedecl> ] [ 0 -* <guppy:otherdecl> ]"

.TABLE	"guppy:testfordecl +:= [ 0 +@define 1 ] [ 1 {<gup:testtrue>} -* ]"
	"[ 0 -* 2 ] [ 2 {<gup:testfalse>} -* ]"

.TABLE	"guppy:testforexpr +:= [ 0 -* 1 ] [ 1 {<gup:testfalse>} -* ]"

.TABLE	"guppy:namestartproc +:= [ 0 +Name 1 ] [ 1 +@@= 2 ] [ 2 {<gup:rewindlexer>} -* <guppy:oneassign> ]"
.TABLE	"guppy:namestartproc +:= [ 0 +Name 1 ] [ 1 +@@? 2 ] [ 2 {<gup:rewindlexer>} -* <guppy:input> ]"
.TABLE	"guppy:namestartproc +:= [ 0 +Name 1 ] [ 1 +@@! 2 ] [ 2 {<gup:rewindlexer>} -* <guppy:output> ]"
.TABLE	"guppy:namestartproc +:= [ 0 +Name 1 ] [ 1 +@@( 2 ] [ 2 {<gup:rewindlexer>} -* <guppy:instance> ]"
.TABLE	"guppy:namestartproc +:= [ 0 +Name 1 ] [ 1 +@@. 2 ] [ 1 +@@[ 2 ] [ 2 {<gup:rewindlexer>} -* <guppy:exprstartproc> ]"
.TABLE	"guppy:namestartproc +:= [ 0 +Name 1 ] [ 1 +@@+= 2 ] [ 1 +@@-= 2 ] [ 1 +@@*= 2 ]"
	"[ 1 +@@/= 2 ] [ 1 +@@\\= 2 ] [ 1 +@@&&= 2 ] [ 1 +@@||= 2 ] [ 1 +@@><= 2 ] [ 1 +@@&= 2 ] [ 1 +@@|= 2 ]"
	"[ 1 +@@++= 2 ] [ 1 +@@--= 2 ] [ 1 +@@**= 2 ] [ 1 +@@<<= 2 ] [ 1 +@@>>= 2 ] [ 1 +@@>>>= 2 ]"
	"[ 2 {<gup:rewindlexer>} -* <guppy:exprstartproc> ]"

# "guppy:exprstartproc" handles processes that might start with expressions, e.g. complex LHS for action

.TABLE	"guppy:exprstartproc ::= [ 0 guppy:expr 1 ] [ 1 -@@= <guppy:assignlhs> ] [ 1 -@@? <guppy:inputlhs> ] [ 1 -@@! <guppy:outputlhs> ]"
	"[ 1 -* 2 ] [ 2 {Rguppy:checkfixio} -* 3 ] [ 3 -@@= <guppy:assignlhs> ] [ 3 -@@? <guppy:inputlhs> ] [ 3 -@@! <guppy:outputlhs> ]"
	"[ 1 @@+= <guppy:addinlhs> ] [ 1 @@-= <guppy:subinlhs> ] [ 1 @@*= <guppy:mulinlhs> ] [ 1 @@/= <guppy:divinlhs> ] [ 1 @@\\= <guppy:reminlhs> ]"
	"[ 1 @@>>= <guppy:shrinlhs> ] [ 1 @@<<= <guppy:shlinlhs> ] [ 1 @@>>>= <guppy:ashrinlhs> ]"
	"[ 1 @@&&= <guppy:andinlhs> ] [ 1 @@||= <guppy:orinlhs> ] [ 1 @@><= <guppy:xorinlhs> ] [ 1 @@&= <guppy:bitandinlhs> ] [ 1 @@|= <guppy:bitorinlhs> ]"
	"[ 1 @@++= <guppy:plusinlhs> ] [ 1 @@--= <guppy:minusinlhs> ] [ 1 @@**= <guppy:timesinlhs> ]"

# }}}


.SECTION "guppy-decls" # {{{: variables and other named things

.GRULE	"gup:namereduce" "T+St0X[guppy_nametoken_to_hook]C[NAME]1R-"
.GRULE	"gup:namepush" "T+St0X[guppy_nametoken_to_hook]C[NAME]1N-"
.GRULE	"gup:checktypename" "T+St0X[guppy_checktypename]R-"

.GRULE	"gup:fparam2nsreduce" "N+Sn0N+0C[FPARAM]3R-"
.GRULE	"gup:vardeclreduce" "N+N+0C[VARDECL]3R-"

.GRULE	"gup:enumreduce" "SN0N+0C[ENUMDEF]2R-"
.GRULE	"gup:typedefreduce" "SN1N+N+V0VC[TYPEDEF]3R-"

.BNF	"guppy:name ::= +Name {<gup:namereduce>}"
.BNF	"guppy:namelist ::= { guppy:name @@, 1 }"

.TABLE	"guppy:exprstartname ::= [ 0 -* 1 ] [ 1 {<gup:nullreduce>} -* 2 ] [ 2 -* <guppy:restofexpr> ]"
.TABLE	"guppy:expr +:= [ 0 guppy:name <guppy:exprstartname> ]"

# Note: the fparam parsing is a little pickled, but partly because we permit typeless parameter names, that
# may have other cruft associated with them (direction-specifiers and initialisers, amongst others).

.TABLE	"guppy:fparamname ::= [ 0 guppy:name 1 ] [ 1 @@? 2 ] [ 2 {<gup:markedinreduce>} -* ]"
	"[ 1 @@! 3 ] [ 3 {<gup:markedoutreduce>} -* ] [ 1 -* 4 ] [ 4 {<gup:nullreduce>} -* ]"
.TABLE	"guppy:fparam ::= [ 0 guppy:type 1 ] [ 1 guppy:fparamname 2 ] [ 2 {<gup:fparam2nsreduce>} -* ]"
	"[ 0 +Name 3 ] [ 3 +@@? 4 ] [ 3 +@@! 4 ] [ 3 +@@, 5 ] [ 3 +@@) 5 ] [ 4 +@@, 5 ] [ 4 +@@) 5 ]"
	"[ 5 {<gup:rewindlexer>} -* 6 ] [ 6 {<gup:nullpush>} -* 1 ]"
	"[ 3 +Name 7 ] [ 7 {<gup:rewindlexer>} -* 8 ] [ 8 guppy:name 1 ]"

.BNF	"guppy:fparamlist ::= ( -@@) {<gup:nullset>} | { guppy:fparam @@, 1 } )"

.TABLE	"guppy:otherdecl +:= [ 0 guppy:type 1 ] [ 1 guppy:nameandassignlist 2 ] [ 2 {<gup:vardeclreduce>} -* ]"
	"[ 0 guppy:name 3 ] [ 3 @@( 4 ] [ 4 guppy:typelist 5 ] [ 5 @@) 6 ] [ 6 {<gup:makeinstance>} -* 1 ]"
	"[ 3 -* 1 ]"

.TABLE	"guppy:testfordecl +:= [ 0 +@val 1 ] [ 0 +@int 1 ] [ 0 +@real 1 ] [ 0 +@bool 1 ] [ 0 +@byte 1 ] [ 0 +@char 1 ] [ 0 +@string 1 ] [ 0 +@chan 1 ]"
	"[ 1 {<gup:testtrue>} -* ]"
.TABLE	"guppy:testfordecl +:= [ 0 +Name 1 ] [ 1 {<gup:checktypename>} -* ]"
.TABLE	"guppy:testfordecl +:= [ 0 +@@[ 1 ] [ 0 +@@[] 1 ] [ 1 {<gup:testtrue>} -* ]"

.TABLE	"guppy:testforexpr +:= [ 0 +Name 1 ] [ 1 {<gup:testtrue>} -* ]"


# Note: for enumerated types (and others) the parser loop proper scoops up the contents into subnode 1
.TABLE	"guppy:definedecl +:= [ 0 @enum 1 ] [ 1 guppy:name 2 ] [ 2 {<gup:enumreduce>} -* ]"

.TABLE	"guppy:definedecl +:= [ 0 @type 1 ] [ 1 guppy:name 2 ] [ 2 @@( 3 ] [ 3 guppy:namelist 4 ] [ 4 @@) 5 ] [ 5 {<gup:typedefreduce>} -* ]"
	"[ 2 -* 6 ] [ 6 {<gup:nullpush>} -* 5 ]"

.TABLE	"guppy:nameandassign ::= [ 0 guppy:name 1 ] [ 1 @@= 3 ] [ 1 @is 5 ] [ 1 -* 2 ] [ 2 {<gup:nullreduce>} -* ]"
	"[ 3 guppy:expr 4 ] [ 4 {<gup:assignreduce>} -* ]"
	"[ 5 guppy:expr 6 ] [ 6 {<gup:isreduce>} -* ]"

.BNF	"guppy:nameandassignlist ::= { guppy:nameandassign @@, 1 }"

# when we come in here, lexer is rewound (two names waiting)
.TABLE	"guppy:namenamestartproc +:= [ 0 guppy:name 1 ] [ 1 guppy:nameandassignlist 2 ] [ 2 {<gup:vardeclreduce>} -* ]"


# }}}
.SECTION "guppy-lit" # {{{: literals

.GRULE	"gup:litboolreduce" "T+St0X[guppy_token_to_lithook]0VC[LITBOOL]2R-"
.GRULE	"gup:litintreduce" "T+St0X[guppy_token_to_lithook]0VC[LITINT]2R-"
.GRULE	"gup:litrealreduce" "T+St0X[guppy_token_to_lithook]0VC[LITREAL]2R-"
.GRULE	"gup:litstringreduce" "T+St0X[guppy_token_to_lithook]0VC[LITSTRING]2R-"

.TABLE	"guppy:literal ::= [ 0 +Integer 1 ] [ 1 {<gup:litintreduce>} -* ] [ 0 +Real 2 ] [ 2 {<gup:litrealreduce>} -* ]"
			"[ 0 +String 3 ] [ 3 {<gup:litstringreduce>} -* ]"
			"[ 0 +@true 4 ] [ 0 +@false 4 ] [ 4 {<gup:litboolreduce>} -* ]"
.TABLE	"guppy:litstring ::= [ 0 +String 1 ] [ 1 {<gup:litstringreduce>} -* ]"

.TABLE	"guppy:expr +:= [ 0 guppy:literal 1 ] [ 1 {<gup:nullreduce>} -* 2 ] [ 2 -* <guppy:restofexpr> ]"

# }}}
.SECTION "guppy-types" # {{{: types

.RFUNC	"Rguppy:primtype" "guppy_reduce_primtype"
.RFUNC	"Rguppy:chantype" "guppy_reduce_chantype"
.RFUNC	"Rguppy:arraytype" "guppy_reduce_arraytype"

.GRULE	"gup:valtypereduce" "SN0N+C[VALTYPE]1R-"
.GRULE	"gup:anytypepush" "T+St0@tC[ANY]0N-"

.BNF	"guppy:primtype ::= ( +@int | +@uint | +@real | +@bool | +@byte | +@char | +@string ) {Rguppy:primtype}"

.TABLE	"guppy:chantype ::= [ 0 +@chan 1 ] [ 1 +@@? 2 ] [ 1 +@@! 2 ] [ 1 -* 2 ]"
	"[ 2 @@( 3 ] [ 3 +@@* 6 ] [ 3 guppy:type 4 ] [ 4 @@) 5 ] [ 5 {Rguppy:chantype} -* ]"
	"[ 6 {<gup:anytypepush>} -* 4 ]"

.TABLE	"guppy:arraydimexpr ::= [ 0 -@@] 1 ] [ 1 {<gup:nullpush>} -* 2 ] [ 2 {<gup:nullreduce>} -* ]"
	"[ 0 -* 3 ] [ 3 guppy:exprlist 2 ]"

.TABLE	"guppy:arraytype ::= [ 0 @@[ 1 ] [ 1 guppy:arraydimexpr 2 ] [ 2 @@] 3 ] [ 3 guppy:type 4 ] [ 4 {Rguppy:arraytype} -* ]"
	"[ 0 @@[] 5 ] [ 5 {<gup:nullpush>} -* 3 ]"

.BNF	"guppy:subtype ::= ( guppy:primtype {<gup:nullreduce>} | guppy:chantype {<gup:nullreduce>} | guppy:arraytype {<gup:nullreduce>} )"
.BNF	"guppy:namedsubtype ::= ( guppy:primtype {<gup:nullreduce>} | guppy:chantype {<gup:nullreduce>} | guppy:arraytype {<gup:nullreduce>} | guppy:name {<gup:nullreduce>} )"
.TABLE	"guppy:type ::= [ 0 %guppy:subtype 3 ] [ 0 @val 1 ] [ 1 guppy:namedsubtype 2 ] [ 2 {<gup:valtypereduce>} -* ]"
	"[ 3 guppy:subtype 4 ] [ 4 {<gup:nullreduce>} -* ]"

.BNF	"guppy:typelist ::= { guppy:type @@, 1 }"

# }}}
.SECTION "guppy-fcndef" # {{{: function/procedure definitions

.GRULE	"gup:extdeclreduce" "SN0N+N+VC[EXTDECL]2R-"
.GRULE	"gup:libdescreduce" "SN0N+0C[LIBDECL]2R-"


.GRULE	"gup:fcndefreduce" "SN1N+N+V000C[FCNDEF]5R-"
.GRULE	"gup:fcndefreduce1" "SN0N+0000C[FCNDEF]5R-"
.GRULE	"gup:fcndefreduce2" "SN2N+0N+N+V*0C[FCNDEF]5R-"

.TABLE	"guppy:definedecl +:= [ 0 guppy:name 1 ] [ 0 guppy:litstring 1 ] [ 1 @@( 3 ] [ 1 -* 2 ] [ 2 {<gup:fcndefreduce1>} -* ]"
	"[ 3 guppy:fparamlist 4 ] [ 4 @@) 5 ] [ 5 @@-> 7 ] [ 5 -* 6 ] [ 6 {<gup:fcndefreduce>} -* ]"
	"[ 7 guppy:typelist 8 ] [ 8 {<gup:fcndefreduce2>} -* ]"

# }}}
.SECTION "guppy-primproc" # {{{: primitive processes

.RFUNC	"Rguppy:primproc" "guppy_reduce_primproc"

.BNF	"guppy:primproc ::= ( +@skip | +@stop ) {Rguppy:primproc}"

# }}}
.SECTION "guppy-cnode" # {{{: constructor processes

.GRULE	"gup:seqreduce" "T+St0@t00C[SEQ]2R-"
.GRULE	"gup:parreduce" "T+St0@t00C[PAR]2R-"
.GRULE	"gup:altreduce" "T+St0@t00C[ALT]2R-"
.GRULE	"gup:prialtreduce" "T+St0@t00C[PRIALT]2R-"

.GRULE	"gup:replseqreduce" "T+St0@tN+N+N+00V*C[REPLSEQ]5R-"

.GRULE	"gup:guardreduce" "SN00N+0C[GUARD]3R-"

.TABLE	"guppy:cnode ::= [ 0 +@seq 1 ] [ 1 -Newline 2 ] [ 2 {<gup:seqreduce>} -* ]"
	"[ 1 guppy:name 3 ] [ 3 @@= 4 ] [ 4 guppy:expr 5 ] [ 5 @for 6 ] [ 6 guppy:expr 7 ] [ 7 {<gup:replseqreduce>} -* ]"
	"[ 1 @for 8 ] [ 8 {<gup:null2push>} -* 6 ]"
	"[ 0 +@par 9 ] [ 9 -Newline 10 ] [ 9 -Comment 10 ] [ 10 {<gup:parreduce>} -* ]"
	"[ 0 +@alt 11 ] [ 11 -Newline 12 ] [ 11 -Comment 12 ] [ 12 {<gup:altreduce>} -* ]"
	"[ 0 +@pri 13 ] [ 13 @alt 14 ] [ 14 -Newline 15 ] [ 14 -Comment 15 ] [ 15 {<gup:prialtreduce>} -* ]"

.TABLE	"guppy:guard +:= [ 0 guppy:primproc 1 ] [ 1 {<gup:guardreduce>} -* ]"

# }}}
.SECTION "guppy-cflow" # {{{: control-flow processes

.GRULE	"gup:ifreduce" "T+St0@t00C[IF]2R-"
.GRULE	"gup:shortifreduce" "T+St0@tN+0C[SHORTIF]2R-"
.GRULE	"gup:whilereduce" "T+St0@tN+0C[WHILE]2R-"
.GRULE	"gup:retreduce" "T+St0@tN+0C[RETURN]2R-"
.GRULE	"gup:zretreduce" "T+St0@t00C[RETURN]2R-"
.GRULE	"gup:elsereduce" "T+St0@tC[ELSE]0R-"

.TABLE	"guppy:cflow ::= [ 0 +@if 1 ] [ 1 guppy:expr 2 ] [ 2 -Newline 3 ] [ 2 -Comment 3 ] [ 3 {<gup:shortifreduce>} -* ]"
	"[ 1 -Newline 4 ] [ 1 -Comment 4 ] [ 4 {<gup:ifreduce>} -* ]"
.TABLE	"guppy:cflow +:= [ 0 +@while 1 ] [ 1 guppy:expr 2 ] [ 2 {<gup:whilereduce>} -* ]"

.TABLE	"guppy:cflow +:= [ 0 +@return 1 ] [ 1 -Comment 2 ] [ 1 -Newline 2 ] [ 2 {<gup:zretreduce>} -* ]"
	"[ 1 -* 3 ] [ 3 guppy:exprlist 4 ] [ 4 {<gup:retreduce>} -* ]"

.TABLE	"guppy:expr +:= [ 0 +@else 1 ] [ 1 {<gup:elsereduce>} -* ]"

# }}}
.SECTION "guppy-assign" # {{{: assignment

.GRULE	"gup:assignreduce" "SN0N+N+V0C[ASSIGN]3R-"
.GRULE	"gup:isreduce" "SN0N+N+V0C[IS]3R-"

.TABLE	"guppy:oneassign ::= [ 0 guppy:name 1 ] [ 1 @@= 2 ] [ 2 guppy:expr 3 ] [ 3 {<gup:assignreduce>} -* ]"

# when we get here, have expression or list-of (LHS) on node-stack
.TABLE	"guppy:assignlhs ::= [ 0 @@= 1 ] [ 1 guppy:exprlist 2 ] [ 2 {<gup:assignreduce>} -* ]"

# }}}
.SECTION "guppy-io" # {{{: input/output

.GRULE	"gup:inputreduce" "SN0N+N+V0C[INPUT]3R-"
.GRULE	"gup:caseinputreduce" "SN0N+00C[CASEINPUT]3R-"
.GRULE	"gup:outputreduce" "SN0N+N+V0C[OUTPUT]3R-"

.TABLE	"guppy:input ::= [ 0 guppy:name 1 ] [ 1 @@? 2 ] [ 2 guppy:expr 3 ] [ 3 {<gup:inputreduce>} -* ]"
	"[ 2 @case 4 ] [ 4 {<gup:caseinputreduce>} -* ]"

.TABLE	"guppy:output ::= [ 0 guppy:name 1 ] [ 1 @@! 2 ] [ 2 guppy:expr 3 ] [ 3 {<gup:outputreduce>} -* ]"

# when we get here, have expression or list-of (LHS) on node-stack
.TABLE	"guppy:inputlhs ::= [ 0 @@? 1 ] [ 1 guppy:exprlist 2 ] [ 2 {<gup:inputreduce>} -* ]"
.TABLE	"guppy:outputlhs ::= [ 0 @@! 1 ] [ 1 guppy:exprlist 2 ] [ 2 {<gup:outputreduce>} -* ]"

.TABLE	"guppy:guard +:= [ 0 -Name 1 ] [ 1 guppy:input 2 ] [ 2 {<gup:guardreduce>} -* ]"

.TABLE	"guppy:restofguard2 +:= [ 0 guppy:restofinput2 1 ] [ 1 {<gup:guardreduce>} -* ]"

.TABLE	"guppy:restofinput +:= [ 0 @@? 1 ] [ 1 {<gup:nullpush>} -* 2 ] [ 2 guppy:expr 3 ] [ 3 {<gup:inputreduce>} -* ]"
	"[ 2 @case 4 ] [ 4 {<gup:caseinputreduce>} -* ]"
.TABLE	"guppy:restofinput2 +:= [ 0 -* 1 ] [ 1 {<gup:nullpush>} -* 2 ] [ 2 guppy:expr 3 ] [ 3 {<gup:inputreduce>} -* ]"
	"[ 2 @case 4 ] [ 4 {<gup:caseinputreduce>} -* ]"

# }}}
.SECTION "guppy-oper" # {{{: operators

.GRULE	"gup:foldaddreduce" "R+N+Sn00C[ADD]3R-"
.GRULE	"gup:foldsubreduce" "R+N+Sn00C[SUB]3R-"
.GRULE	"gup:foldmulreduce" "R+N+Sn00C[MUL]3R-"
.GRULE	"gup:folddivreduce" "R+N+Sn00C[DIV]3R-"
.GRULE	"gup:foldremreduce" "R+N+Sn00C[REM]3R-"
.GRULE	"gup:foldashrreduce" "R+N+Sn00C[ASHR]3R-"
.GRULE	"gup:foldshrreduce" "R+N+Sn00C[SHR]3R-"
.GRULE	"gup:foldshlreduce" "R+N+Sn00C[SHL]3R-"
.GRULE	"gup:foldxorreduce" "R+N+Sn00C[XOR]3R-"
.GRULE	"gup:foldandreduce" "R+N+Sn00C[AND]3R-"
.GRULE	"gup:foldorreduce" "R+N+Sn00C[OR]3R-"
.GRULE	"gup:foldltreduce" "R+N+Sn00C[LT]3R-"
.GRULE	"gup:foldlereduce" "R+N+Sn00C[LE]3R-"
.GRULE	"gup:foldgtreduce" "R+N+Sn00C[GT]3R-"
.GRULE	"gup:foldgereduce" "R+N+Sn00C[GE]3R-"
.GRULE	"gup:foldeqreduce" "R+N+Sn00C[EQ]3R-"
.GRULE	"gup:foldnereduce" "R+N+Sn00C[NE]3R-"
.GRULE	"gup:foldplusreduce" "R+N+Sn00C[PLUS]3R-"
.GRULE	"gup:foldminusreduce" "R+N+Sn00C[MINUS]3R-"
.GRULE	"gup:foldtimesreduce" "R+N+Sn00C[TIMES]3R-"
.GRULE	"gup:negreduce" "SN0N+0C[NEG]2R-"
.GRULE	"gup:bitnotreduce" "SN0N+0C[BITNOT]2R-"
.GRULE	"gup:notreduce" "SN0N+0C[NOT]2R-"
.GRULE	"gup:foldmarkedinreduce" "R+Sn00C[MARKEDIN]2R-"
.GRULE	"gup:foldmarkedoutreduce" "R+Sn00C[MARKEDOUT]2R-"
.GRULE	"gup:sizereduce" "SN0N+0C[SIZE]2R-"
.GRULE	"gup:bytesinreduce" "SN0N+0C[BYTESIN]2R-"
.GRULE	"gup:foldarraysub" "R+N+Sn00C[ARRAYSUB]3R-"
.GRULE	"gup:markedinreduce" "SN0N+0C[MARKEDIN]2R-"
.GRULE	"gup:markedoutreduce" "SN0N+0C[MARKEDOUT]2R-"

.GRULE	"gup:addinreduce" "SN0N+N+VC[ADDIN]2R-"
.GRULE	"gup:subinreduce" "SN0N+N+VC[SUBIN]2R-"
.GRULE	"gup:mulinreduce" "SN0N+N+VC[MULIN]2R-"
.GRULE	"gup:divinreduce" "SN0N+N+VC[DIVIN]2R-"
.GRULE	"gup:reminreduce" "SN0N+N+VC[REMIN]2R-"
.GRULE	"gup:shrinreduce" "SN0N+N+VC[SHRIN]2R-"
.GRULE	"gup:shlinreduce" "SN0N+N+VC[SHLIN]2R-"
.GRULE	"gup:ashrinreduce" "SN0N+N+VC[ASHRIN]2R-"
.GRULE	"gup:andinreduce" "SN0N+N+VC[ANDIN]2R-"
.GRULE	"gup:orinreduce" "SN0N+N+VC[ORIN]2R-"
.GRULE	"gup:xorinreduce" "SN0N+N+VC[XORIN]2R-"
.GRULE	"gup:plusinreduce" "SN0N+N+VC[PLUSIN]2R-"
.GRULE	"gup:minusinreduce" "SN0N+N+VC[MINUSIN]2R-"
.GRULE	"gup:timesinreduce" "SN0N+N+VC[TIMESIN]2R-"
.GRULE	"gup:bitandinreduce" "SN0N+N+VC[BITANDIN]2R-"
.GRULE	"gup:bitorinreduce" "SN0N+N+VC[BITORIN]2R-"

# array/record things are fundamentally types, so..

.TABLE	"guppy:expr +:= [ 0 @size 1 ] [ 1 guppy:expr 2 ] [ 2 {<gup:sizereduce>} -* ]"
.TABLE	"guppy:expr +:= [ 0 @bytesin 1 ] [ 1 guppy:expr 2 ] [ 2 {<gup:bytesinreduce>} -* ]"
.TABLE	"guppy:expr +:= [ 0 @@( 1 ] [ 1 guppy:expr 2 ] [ 2 @@) 3 ] [ 3 {<gup:nullreduce>} -* <guppy:restofexpr> ]"
.TABLE	"guppy:expr +:= [ 0 @@- 1 ] [ 1 guppy:expr 2 ] [ 2 {<gup:negreduce>} -* <guppy:restofexpr> ]"

.TABLE	"guppy:testforexpr +:= [ 0 +@@( 1 ] [ 0 +@size 1 ] [ 0 +@bytesin 1 ] [ 0 +@@- 1 ] [ 1 {<gup:testtrue>} -* ]"


# for "guppy:restofexpr" existing expression is result already
.TABLE	"guppy:restofexpr +:= [ 0 @@+ 1 ] [ 1 guppy:expr 2 ] [ 2 {<gup:foldaddreduce>} -* ]"
	"[ 0 @@- 3 ] [ 3 guppy:expr 4 ] [ 4 {<gup:foldsubreduce>} -* ]"
	"[ 0 @@* 5 ] [ 5 guppy:expr 6 ] [ 6 {<gup:foldmulreduce>} -* ]"
	"[ 0 @@/ 7 ] [ 7 guppy:expr 8 ] [ 8 {<gup:folddivreduce>} -* ]"
	"[ 0 @@\\ 9 ] [ 9 guppy:expr 10 ] [ 10 {<gup:foldremreduce>} -* ]"
	"[ 0 @@? 11 ] [ 11 {<gup:foldmarkedinreduce>} -* ]"
	"[ 0 @@! 12 ] [ 12 {<gup:foldmarkedoutreduce>} -* ]"
	"[ 0 @@>< 13 ] [ 13 guppy:expr 14 ] [ 14 {<gup:foldxorreduce>} -* ]"
	"[ 0 @@&& 15 ] [ 15 guppy:expr 16 ] [ 16 {<gup:foldandreduce>} -* ]"
	"[ 0 @@|| 17 ] [ 17 guppy:expr 18 ] [ 18 {<gup:foldorreduce>} -* ]"
	"[ 0 @@< 19 ] [ 19 guppy:expr 20 ] [ 20 {<gup:foldltreduce>} -* ]"
	"[ 0 @@<= 21 ] [ 21 guppy:expr 22 ] [ 22 {<gup:foldlereduce>} -* ]"
	"[ 0 @@> 23 ] [ 23 guppy:expr 24 ] [ 24 {<gup:foldgtreduce>} -* ]"
	"[ 0 @@>= 25 ] [ 25 guppy:expr 26 ] [ 26 {<gup:foldgereduce>} -* ]"
	"[ 0 @@== 27 ] [ 27 guppy:expr 28 ] [ 28 {<gup:foldeqreduce>} -* ]"
	"[ 0 @@!= 29 ] [ 29 guppy:expr 30 ] [ 30 {<gup:foldnereduce>} -* ]"
	"[ 0 @@>>> 31 ] [ 31 guppy:expr 32 ] [ 32 {<gup:foldashrreduce>} -* ]"
	"[ 0 @@>> 33 ] [ 33 guppy:expr 34 ] [ 34 {<gup:foldshrreduce>} -* ]"
	"[ 0 @@<< 35 ] [ 35 guppy:expr 36 ] [ 36 {<gup:foldshlreduce>} -* ]"
	"[ 0 @@++ 37 ] [ 37 guppy:expr 38 ] [ 38 {<gup:foldplusreduce>} -* ]"
	"[ 0 @@-- 39 ] [ 39 guppy:expr 40 ] [ 40 {<gup:foldminusreduce>} -* ]"
	"[ 0 @@** 41 ] [ 41 guppy:expr 42 ] [ 42 {<gup:foldtimesreduce>} -* ]"
	"[ 0 -* ]"

.TABLE	"guppy:restofexpr +:= [ 0 @@[ 1 ] [ 1 guppy:expr 2 ] [ 2 @@] 3 ] [ 3 {<gup:foldarraysub>} -* <guppy:restofexpr> ]"
.TABLE	"guppy:restofexpr +:= [ 0 @@. 1 ] [ 1 guppy:expr 2 ] [ 2 {<gup:foldarraysub>} -* <guppy:restofexpr> ]"

.TABLE	"guppy:addinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:addinreduce>} -* ]"
.TABLE	"guppy:subinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:subinreduce>} -* ]"
.TABLE	"guppy:mulinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:mulinreduce>} -* ]"
.TABLE	"guppy:divinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:divinreduce>} -* ]"
.TABLE	"guppy:reminlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:reminreduce>} -* ]"
.TABLE	"guppy:shrinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:shrinreduce>} -* ]"
.TABLE	"guppy:shlinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:shlinreduce>} -* ]"
.TABLE	"guppy:ashrinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:ashrinreduce>} -* ]"
.TABLE	"guppy:andinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:andinreduce>} -* ]"
.TABLE	"guppy:orinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:orinreduce>} -* ]"
.TABLE	"guppy:xorinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:xorinreduce>} -* ]"
.TABLE	"guppy:bitandinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:bitandinreduce>} -* ]"
.TABLE	"guppy:bitorinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:bitorinreduce>} -* ]"
.TABLE	"guppy:plusinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:plusinreduce>} -* ]"
.TABLE	"guppy:minusinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:minusinreduce>} -* ]"
.TABLE	"guppy:timesinlhs ::= [ 0 guppy:expr 1 ] [ 1 {<gup:timesinreduce>} -* ]"

# }}}
.SECTION "guppy-instance" # {{{

.GRULE	"gup:makeinstance" "SN1N+N+VC[INSTANCE]2N-"
.GRULE	"gup:instancereduce" "SN1N+N+VC[INSTANCE]2R-"
.GRULE	"gup:rinstancereduce" "SN1N+N+VC[INSTANCE]2R-"

.BNF	"guppy:exprlist ::= { guppy:expr @@, 1 }"

.TABLE	"guppy:instance ::= [ 0 guppy:name 1 ] [ 1 @@( 2 ] [ 2 @@) 3 ] [ 3 {<gup:nullpush>} -* 6 ]"
	"[ 2 -* 4 ] [ 4 guppy:exprlist 5 ] [ 5 @@) 6 ] [ 6 {<gup:instancereduce>} -* ]"

# looking at an expression that starts with a name; could be an instance.
.TABLE	"guppy:exprstartname +:= [ 0 @@( 1 ] [ 1 @@) 2 ] [ 2 {<gup:nullpush>} -* 5 ]"
	"[ 1 -* 3 ] [ 3 guppy:exprlist 4 ] [ 4 @@) 5 ] [ 5 {<gup:rinstancereduce>} -* <guppy:restofexpr> ]"

# }}}
.SECTION "guppy-timer" # {{{

.GRULE	"gup:timerreduce" "T+St0@tC[TIMER]0R-"
.GRULE	"gup:afterreduce" "SN0N+0C[AFTER]2R-"

.TABLE	"guppy:testfordecl +:= [ 0 +@timer 1 ] [ 1 {<gup:testtrue>} -* ]"
.TABLE	"guppy:type +:= [ 0 +@timer 1 ] [ 1 {<gup:timerreduce>} -* ]"

.TABLE	"guppy:expr +:= [ 0 @after 1 ] [ 1 guppy:expr 2 ] [ 2 {<gup:afterreduce>} -* ]"

# }}}


