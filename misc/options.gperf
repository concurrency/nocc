%{
/*
 *	options.gperf -- command-line options for nocc
 */
%}
%struct-type
%language=ANSI-C
%define initializer-suffix ,'\0',NULL,NULL,NULL,-1
%define slot-name name
%define lookup-function-name option_lookup_byname
%null-strings
%global-table
%readonly-tables

struct TAG_cmd_option;
%%
help,			'h',	opt_do_help,		NULL,				"0display standard usage information",			0
help-ful,		'\0',	opt_do_help,		NULL,				"1display full usage information",			1
dump-specs,		'\0',	opt_setintflag,		&(compopts.dumpspecs),		"1print compiler specs",				2
dump-tree,		'\0',	opt_setintflag,		&(compopts.dumptree),		"1print parse tree",					3
dump-grammar,		'\0',	opt_setintflag,		&(compopts.dumpgrammar),	"1print grammars during parser init",			4
dump-dfas,		'\0',	opt_setintflag,		&(compopts.dumpdfas),		"1print named DFAs after parser init",			5
dump-names,		'\0',	opt_setintflag,		&(compopts.dumpnames),		"1print names after scope",				6
dump-targets,		'\0',	opt_setintflag,		&(compopts.dumptargets),	"1print supported targets after initialisation",	7
dump-varmaps,		'\0',	opt_setintflag,		&(compopts.dumpvarmaps),	"1print variable maps after block allocation",		8
save-named-dfa,		'\0',	opt_setsaveopt,		(void *)1,			"1save named DFA to file",				9
save-all-dfas,		'\0',	opt_setstr,		&(compopts.savealldfas),	"1save all DFAs to file",				10
stop-token,		'\0',	opt_setstopflag,	(void *)1,			"1stop after tokenise (and print tokens)",		11
stop-parse,		'\0',	opt_setstopflag,	(void *)2,			"1stop after parse",					12
stop-prescope,		'\0',	opt_setstopflag,	(void *)3,			"1stop after pre-scope",				13
stop-scope,		'\0',	opt_setstopflag,	(void *)4,			"1stop after scope",					14
stop-typecheck,		'\0',	opt_setstopflag,	(void *)5,			"1stop after type check",				15
stop-aliascheck,	'\0',	opt_setstopflag,	(void *)6,			"1stop after alias check",				16
stop-usagecheck,	'\0',	opt_setstopflag,	(void *)7,			"1stop after parallel-usage check",			17
stop-undefcheck,	'\0',	opt_setstopflag,	(void *)8,			"1stop after undefined-usage check",			18
stop-fetrans,		'\0',	opt_setstopflag,	(void *)9,			"1stop after front-end tree transform",			19
stop-betrans,		'\0',	opt_setstopflag,	(void *)10,			"1stop after back-end tree transform",			20
stop-namemap,		'\0',	opt_setstopflag,	(void *)11,			"1stop after name-map",					21
stop-alloc,		'\0',	opt_setstopflag,	(void *)12,			"1stop after variable allocation",			22
stop-codegen,		'\0',	opt_setstopflag,	(void *)13,			"1stop after code-generation",				23
skip-aliascheck,	'\0',	opt_clearintflag,	&(compopts.doaliascheck),	"1skip alias checks",					24
skip-usagecheck,	'\0',	opt_clearintflag,	&(compopts.dousagecheck),	"1skip parallel usage checks",				25
skip-defcheck,		'\0',	opt_clearintflag,	&(compopts.dodefcheck),		"1skip undefinedness checks",				26
verbose,		'v',	opt_setintflag,		&(compopts.verbose),		"0verbose compilation",					27
debug-parser,		'\0',	opt_setintflag,		&(compopts.debugparser),	"1debug parser",					28
version,		'V',	opt_do_version,		NULL,				"0print version and exit",				29
compile,		'c',	opt_setintflag,		&(compopts.notmainmodule),	"0compile for separate compilation",			30
dump-dmem,		'\0',	opt_setintflag,		&(compopts.dmemdump),		"1display dynamic memory pool information",		31
specs-file,		'\0',	opt_setstr,		&(compopts.specsfile),		"0path to compiler specs file",				32
output,			'o',	opt_setstr,		&(compopts.outfile),		"0output file-name",					33
%%

