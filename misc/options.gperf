%{
/*
 *	options.gperf -- command-line options for nocc
 */
%}
%struct-type
%language=ANSI-C
%define initializer-suffix ,'\0',NULL,NULL,NULL,-1
%define slot-name name
%define lookup-function-name option_lookup_byname
%null-strings
%global-table
%readonly-tables

struct TAG_cmd_option;
%%
help,			'h',	opt_do_help_flag,	NULL,				"0display standard usage information",			0
help-ful,		'\0',	opt_do_help_flag,	NULL,				"1display full usage information",			1
dump-specs,		'\0',	opt_setintflag,		&(compopts.dumpspecs),		"1print compiler specs",				2
dump-tree,		'\0',	opt_setintflag,		&(compopts.dumptree),		"1print parse tree",					3
dump-tree-to,		'\0',	opt_setstr,		&(compopts.dumptreeto),		"1print parse tree to file",				4
dump-grammar,		'\0',	opt_setintflag,		&(compopts.dumpgrammar),	"1print grammars during parser init",			5
dump-grules,		'\0',	opt_setintflag,		&(compopts.dumpgrules),		"1print generic reduction rules after parser init",	6
dump-dfas,		'\0',	opt_setintflag,		&(compopts.dumpdfas),		"1print named DFAs after parser init",			7
dump-names,		'\0',	opt_setintflag,		&(compopts.dumpnames),		"1print names after scope",				8
dump-targets,		'\0',	opt_setintflag,		&(compopts.dumptargets),	"1print supported targets after initialisation",	9
dump-varmaps,		'\0',	opt_setintflag,		&(compopts.dumpvarmaps),	"1print variable maps after block allocation",		10
dump-nodetypes,		'\0',	opt_setintflag,		&(compopts.dumpnodetypes),	"1print node types after initialisation",		11
dump-chooks,		'\0',	opt_setintflag,		&(compopts.dumpchooks),		"1print compiler hooks",				12
dump-extns,		'\0',	opt_setintflag,		&(compopts.dumpextns),		"1print detailed information about loaded extensions",	13
save-named-dfa,		'\0',	opt_setsaveopt,		(void *)1,			"1save named DFA to file",				14
save-all-dfas,		'\0',	opt_setstr,		&(compopts.savealldfas),	"1save all DFAs to file",				15
stop-token,		'\0',	opt_setstopflag,	(void *)1,			"1stop after tokenise (and print tokens)",		16
stop-parse,		'\0',	opt_setstopflag,	(void *)2,			"1stop after parse",					17
stop-prescope,		'\0',	opt_setstopflag,	(void *)3,			"1stop after pre-scope",				18
stop-scope,		'\0',	opt_setstopflag,	(void *)4,			"1stop after scope",					19
stop-typecheck,		'\0',	opt_setstopflag,	(void *)5,			"1stop after type check",				20
stop-constprop,		'\0',	opt_setstopflag,	(void *)6,			"1stop after constant propagation",			21
stop-precheck,		'\0',	opt_setstopflag,	(void *)7,			"1stop after pre-check",				22
stop-aliascheck,	'\0',	opt_setstopflag,	(void *)8,			"1stop after alias check",				23
stop-usagecheck,	'\0',	opt_setstopflag,	(void *)9,			"1stop after parallel-usage check",			24
stop-undefcheck,	'\0',	opt_setstopflag,	(void *)10,			"1stop after undefined-usage check",			25
stop-fetrans,		'\0',	opt_setstopflag,	(void *)11,			"1stop after front-end tree transform",			26
stop-betrans,		'\0',	opt_setstopflag,	(void *)12,			"1stop after back-end tree transform",			27
stop-namemap,		'\0',	opt_setstopflag,	(void *)13,			"1stop after name-map",					28
stop-prealloc,		'\0',	opt_setstopflag,	(void *)14,			"1stop after pre-allocation",				29
stop-alloc,		'\0',	opt_setstopflag,	(void *)15,			"1stop after variable allocation",			30
stop-codegen,		'\0',	opt_setstopflag,	(void *)16,			"1stop after code-generation",				31
skip-aliascheck,	'\0',	opt_clearintflag,	&(compopts.doaliascheck),	"1skip alias checks",					32
skip-usagecheck,	'\0',	opt_clearintflag,	&(compopts.dousagecheck),	"1skip parallel usage checks",				33
skip-defcheck,		'\0',	opt_clearintflag,	&(compopts.dodefcheck),		"1skip undefinedness checks",				34
trace-parser,		'\0',	opt_setintflag,		&(compopts.traceparser),	"1trace parser (debugging)",				35
trace-typecheck,	'\0',	opt_setintflag,		&(compopts.tracetypecheck),	"1trace type-check (debugging)",			36
verbose,		'v',	opt_setintflag,		&(compopts.verbose),		"0verbose compilation",					37
debug-parser,		'\0',	opt_setintflag,		&(compopts.debugparser),	"1debug parser",					38
version,		'V',	opt_do_version,		NULL,				"0print version and exit",				39
compile,		'c',	opt_setintflag,		&(compopts.notmainmodule),	"0compile for separate compilation",			40
dump-dmem,		'\0',	opt_setintflag,		&(compopts.dmemdump),		"1display dynamic memory pool information",		41
specs-file,		'\0',	opt_setstr,		&(compopts.specsfile),		"0path to compiler specs file",				42
output,			'o',	opt_setstr,		&(compopts.outfile),		"0output file-name",					43
include-path,		'I',	opt_addincludepath,	NULL,				"0add paths for include files",				44
library-path,		'L',	opt_addlibrarypath,	NULL,				"0add paths for library files",				45
extn-path,		'E',	opt_addextnpath,	NULL,				"1add paths for compiler extensions",			46
extn,			'e',	opt_addextn,		NULL,				"0compiler extension to load",				47
%%

