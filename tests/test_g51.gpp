
# test_g51.gpp -- attempt at dining-phils

@include "guppy_stdlib.gpi"

@external "guppy" "define debug_printf (val string s) = 64"


define fork (val int id, chan(bool) left?, right?)
  while true
    bool any
    alt
      left ? any
        seq
          debug_printf ("left!\n")
          left ? any
      right ? any
        seq
          debug_printf ("right!\n")
          right ? any
end

define rand_delay (val int min, max)
  timer tim
  int t, diff
  seq
    tim ? t
    diff = max - min
    # nasty..
    diff = t \ diff
    tim ? after (t + min + diff)
end

define philosopher (val int id, chan(bool) up!, down!, left!, right!)
  while true
    seq
      # thinking
      rand_delay (500000, 1000000)
      # sit down
      down ! true
      # pick up forks
      par
        left ! true
        right ! true
      # eating
      rand_delay (500000, 1000000)
      # put down forks
      par
        left ! true
        right ! true
      # stand up
      up ! true
end

define security (chan(bool) dn0?, dn1?, dn2?, dn3?, up0?, up1?, up2?, up3?)
  int sat = 0
  bool any
  while true
    while sat < 3
      alt
        up0 ? any
          sat = sat - 1
        up1 ? any
          sat = sat - 1
        up2 ? any
          sat = sat - 1
        up3 ? any
          sat = sat - 1
        dn0 ? any
          sat = sat + 1
        dn1 ? any
          sat = sat + 1
        dn2 ? any
          sat = sat + 1
        dn3 ? any
          sat = sat + 1
    # 3 sat down, one must stand first
    alt
      up0 ? any
        sat = sat - 1
      up1 ? any
        sat = sat - 1
      up2 ? any
        sat = sat - 1
      up3 ? any
        sat = sat - 1

end

define secure_college ()
  chan(bool) up0, up1, up2, up3
  chan(bool) dn0, dn1, dn2, dn3
  chan(bool) fl0, fl1, fl2, fl3
  chan(bool) fr0, fr1, fr2, fr3
  par
    philosopher (0, up0!, dn0!, fl0!, fr0!)
    philosopher (1, up1!, dn1!, fl1!, fr1!)
    philosopher (2, up2!, dn2!, fl2!, fr2!)
    philosopher (3, up3!, dn3!, fl3!, fr3!)
    fork (0, fr0?, fl3?)
    fork (1, fr1?, fl0?)
    fork (2, fr2?, fl1?)
    fork (3, fr3?, fl2?)
    security (dn0?, dn1?, dn2?, dn3?, up0?, up1?, up2?, up3?)

end

