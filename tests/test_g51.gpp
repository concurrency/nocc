
# test_g51.gpp -- attempt at dining-phils

@include "guppy_stdlib.gpi"
@include "guppy_ev3lib.gpi"

@external "guppy" "define debug_printf (val string s) = 96"

define fixed_delay (val int usecs)
  timer tim
  int t

  tim ? t
  tim ? after (t + usecs)
end

val int MOVE_DELAY = 400000
val int FORK_EAT_DELAY = 150000
val int PHIL_POST_EAT_DELAY = 650000

define wait_for_pos (val ev3_outport motor, val int pos)
  bool look = true
  while look
    int p
    
    p = ev3_mot_cur_pos (motor)
    if
      p == pos
        look = false
      else
        fixed_delay (50000)
end

define move_fork (val int id, val ev3_outport motor, chan(int) cmd?, val int inv)
  int c, pos, cpr
  bool b
  int move_delta1, move_delta2
  int eat_delta
  seq
    # centre the fork by swinging left enough
    b = ev3_mot_stop_mode (motor, STM_BRAKE)
    b = ev3_mot_on_fwd (motor, 40)
    fixed_delay (MOVE_DELAY * 4)
    b = ev3_mot_off (motor)

    # where are we now?
    pos = ev3_mot_cur_pos (motor)
    cpr = ev3_mot_count_per_rot (motor)

    move_delta1 = (cpr / 2) - (cpr / 10)
    move_delta2 = (cpr / 2) + (cpr / 4)
    eat_delta = 20

    # then back to the centre (-delta)
    b = ev3_mot_run_to_pos (motor, pos - move_delta1, -50)
    fixed_delay (MOVE_DELAY * 4)


    cmd ? c

    while true
      seq

        # make 'pos' the centre position (will change!)
        pos = ev3_mot_cur_pos (motor)

        debug_printf ("move_fork " + int_to_str (id) + " waiting... pos = " + int_to_str (pos) + "\n")

        cmd ? c
        if
          (c == inv)
            seq
              # move left
              b = ev3_mot_run_to_pos (motor, pos + move_delta2, 50)
              fixed_delay (MOVE_DELAY * 2)
              #wait_for_pos (motor, pos + move_delta2)

              # wait/notify completion
              cmd ? c

              pos = ev3_mot_cur_pos (motor)

              debug_printf ("move_fork " + int_to_str (id) + " in-place waiting for eat, pos = " + int_to_str (pos) + "\n")

              # want/notify for eat activity
              cmd ? c

              bool loop = true
              while loop
                pri alt
                  cmd ? c
                    loop = false
                  skip
                    seq
                      ev3_mot_run_to_pos (motor, pos - eat_delta, -50)
                      fixed_delay (FORK_EAT_DELAY)
                      pos += 5
                      ev3_mot_run_to_pos (motor, pos, 50)
                      fixed_delay (FORK_EAT_DELAY)

              # wait for put-back
              cmd ? c

              b = ev3_mot_run_to_pos (motor, pos - move_delta1, -50)
              fixed_delay (MOVE_DELAY * 2)

              # wait/notify completion
              cmd ? c
          else
            seq
              # move right
              b = ev3_mot_run_to_pos (motor, pos - move_delta2, -50)
              fixed_delay (MOVE_DELAY * 2)
              #wait_for_pos (motor, pos - move_delta2)

              # wait/notify completion
              cmd ? c

              pos = ev3_mot_cur_pos (motor)

              # wait/notify for eat activity
              cmd ? c

              bool loop = true
              while loop
                pri alt
                  cmd ? c
                    loop = false
                  skip
                    seq
                      ev3_mot_run_to_pos (motor, pos + eat_delta, 50)
                      fixed_delay (FORK_EAT_DELAY)
                      pos -= 5
                      ev3_mot_run_to_pos (motor, pos, -50)
                      fixed_delay (FORK_EAT_DELAY)

              # wait for put-back
              cmd ? c

              b = ev3_mot_run_to_pos (motor, pos + move_delta1, 50)
              fixed_delay (MOVE_DELAY * 2)

              # wait/notify completion
              cmd ? c

end

define fork (val int id, chan(bool) left?, right?, chan(int) cmd!)
  while true
    bool any
    alt
      left ? any
        seq
          # animate pick-up
          cmd ! 0
          cmd ! 0
          debug_printf ("fork " + int_to_str (id) + " up! (left)\n")
          left ? any

          # philosopher eats here
          cmd ! 0
          left ? any
          cmd ! 0

          left ? any
          # animate put-down
          cmd ! 0
          cmd ! 0
          debug_printf ("fork " + int_to_str (id) + " down! (left)\n")
          left ? any
      right ? any
        seq
          # animate pick-up
          cmd ! 1
          cmd ! 1
          debug_printf ("fork " + int_to_str (id) + " up! (right)\n")
          right ? any

          #philosopher eats here
          cmd ! 1
          right ? any
          cmd ! 1

          right ? any
          # animate put-down
          cmd ! 1
          cmd ! 1
          debug_printf ("fork " + int_to_str (id) + " down! (right)\n")
          right ? any
end

define rand_delay (val int min, max)
  timer tim
  int t, diff
  seq
    tim ? t
    diff = max - min
    # nasty..
    diff = t \ diff
    tim ? after (t + min + diff)
end

define philosopher (val int id, chan(bool) up!, down!, left!, right!)
  while true
    seq
      # thinking
      debug_printf ("philosopher " + int_to_str (id) + " thinking..\n")
      rand_delay (2000000, 4000000)
      # sit down
      down ! true
      # pick up forks
      par
        left ! true
        right ! true
      # got forks, tell them we're now eating (animate action)
      seq
        left ! true
        right ! true

      # eating
      debug_printf ("philosopher " + int_to_str (id) + " eating..\n")
      rand_delay (2000000, 4000000)
      debug_printf ("philosopher done eating\n")
      # signal done eating to forks (keep in hand, but stop animating eat)
      seq
        left ! true
        right ! true
      debug_printf ("philosopher doing post-delay\n")

      fixed_delay (PHIL_POST_EAT_DELAY)

      # put down forks
      par
        seq
          left ! true
          left ! true
        seq
          right ! true
          right ! true
      # stand up
      up ! true
end

define security (chan(bool) dn0?, dn1?, dn2?, dn3?, up0?, up1?, up2?, up3?)
  int sat = 0
  bool any
  while true
    while sat < 3
      alt
        up0 ? any
          sat = sat - 1
        up1 ? any
          sat = sat - 1
        up2 ? any
          sat = sat - 1
        up3 ? any
          sat = sat - 1
        dn0 ? any
          sat = sat + 1
        dn1 ? any
          sat = sat + 1
        dn2 ? any
          sat = sat + 1
        dn3 ? any
          sat = sat + 1
    # 3 sat down, one must stand first
    alt
      up0 ? any
        sat = sat - 1
      up1 ? any
        sat = sat - 1
      up2 ? any
        sat = sat - 1
      up3 ? any
        sat = sat - 1

end

define secure_college ()
  chan(int) fc0, fc1, fc2, fc3
  par
    move_fork (0, PORT_A, fc0?, 1)
    move_fork (1, PORT_B, fc1?, 0)
    move_fork (2, PORT_C, fc2?, 1)
    move_fork (3, PORT_D, fc3?, 0)

    seq
      # sync with motor drivers before we start the simulation proper.
      seq
        fc0 ! 0
        fc1 ! 0
        fc2 ! 0
        fc3 ! 0

      chan(bool) up0, up1, up2, up3
      chan(bool) dn0, dn1, dn2, dn3
      chan(bool) fl0, fl1, fl2, fl3
      chan(bool) fr0, fr1, fr2, fr3
      par
        philosopher (0, up0!, dn0!, fl0!, fr0!)
        philosopher (1, up1!, dn1!, fl1!, fr1!)
        philosopher (2, up2!, dn2!, fl2!, fr2!)
        philosopher (3, up3!, dn3!, fl3!, fr3!)
        fork (0, fr0?, fl3?, fc0!)
        fork (1, fr1?, fl0?, fc1!)
        fork (2, fr2?, fl1?, fc2!)
        fork (3, fr3?, fl2?, fc3!)
        security (dn0?, dn1?, dn2?, dn3?, up0?, up1?, up2?, up3?)

end

define system (chan(string) screen!)
  bool b
  seq
    b = ev3_mot_init (PORT_A, MDEV_L_MOTOR)
    b = ev3_mot_init (PORT_B, MDEV_L_MOTOR)
    b = ev3_mot_init (PORT_C, MDEV_L_MOTOR)
    b = ev3_mot_init (PORT_D, MDEV_L_MOTOR)

    if (b == false)
      screen ! "failed to initialise PWM!\n"
      return

    secure_college ()

    ev3_mot_shutdown ()
end

