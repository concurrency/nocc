(: (proc (name seq.delta) ((formal (chan int) (name in)) (formal (chan int) (name out.0)) (formal (chan int) (name out.1))) (while true (: (vars int (name n)) (seq (? (name in) (name n)) (! (name out.0) (name n)) (! (name out.1) (name n)))))) (: (proc (name consume) ((formal (val int) (name n.loops)) (formal (chan int) (name in)) (formal (chan byte) (name out))) (: (vars timer (name tim)) (: (vars int (name t0) (name t1)) (: (vars int (name value)) (seq (: (val-is-type int (name warm.up) (integer-literal 16)) (seq-rep (for (name i) (integer-literal 0) (name warm.up)) (? (name in) (name value)))) (while true (seq (? (name tim) (name t0)) (seq-rep (for (name i) (integer-literal 0) (name n.loops)) (? (name in) (name value))) (? (name tim) (name t1)) (: (val-is-type int (name microsecs) (minus (name t1) (name t0))) (: (val-is-type int64 (name nanosecs) (* (integer-literal 1000) (conv int64 (name microsecs)))) (seq (proc-call (name out.string) (string-literal "Last value received = ") (integer-literal 0) (name out)) (proc-call (name out.int) (name value) (integer-literal 0) (name out)) (proc-call (name out.string) (string-literal "*c*n") (integer-literal 0) (name out)) (proc-call (name out.string) (string-literal "Time = ") (integer-literal 0) (name out)) (proc-call (name out.int) (name microsecs) (integer-literal 0) (name out)) (proc-call (name out.string) (string-literal " microsecs*c*n") (integer-literal 0) (name out)) (proc-call (name out.string) (string-literal "Time per loop = ") (integer-literal 0) (name out)) (proc-call (name out.int) (conv int (/ (name nanosecs) (conv int64 (name n.loops)))) (integer-literal 0) (name out)) (proc-call (name out.string) (string-literal " nanosecs*c*n") (integer-literal 0) (name out)) (proc-call (name out.string) (string-literal "Context switch = ") (integer-literal 0) (name out)) (proc-call (name out.int) (conv int (/ (/ (name nanosecs) (conv int64 (name n.loops))) (integer-literal 4))) (integer-literal 0) (name out)) (proc-call (name out.string) (string-literal " nanosecs*c*n*n") (integer-literal 0) (name out)))))))))))) (: (proc (name comms.time) ((formal (chan byte) (name keyboard)) (formal (chan byte) (name screen)) (formal (chan byte) (name error))) (: (vars bool (name use.seq.delta)) (seq (seq (proc-call (name out.string) (string-literal "*c*nCommstime in occam ...*c*n*n") (integer-literal 0) (name screen)) (proc-call (name out.string) (string-literal "Using the SEQ-output version of the delta process*c*n") (integer-literal 0) (name screen)) (proc-call (name out.string) (string-literal "yields a more accurate measure of context-switch time*c*n*n") (integer-literal 0) (name screen)) (proc-call (name out.string) (string-literal "Using the PAR-output version carries an extra overhead*c*n") (integer-literal 0) (name screen)) (proc-call (name out.string) (string-literal "of one process startup/shutdown per Commstime loop*c*n*n") (integer-literal 0) (name screen)) (proc-call (name out.string) (string-literal "By comparing **loop** times between the SEQ and PAR versions,*c*n") (integer-literal 0) (name screen)) (proc-call (name out.string) (string-literal "the process startup/shutdown overhead may be deduced*c*n*n") (integer-literal 0) (name screen))) (proc-call (name ask.bool) (string-literal "Sequential delta? ") (name use.seq.delta) (name keyboard) (name screen)) (proc-call (name out.string) (string-literal "*nCommstime starting ...*c*n*n") (integer-literal 0) (name screen)) (: (vars (chan int) (name a) (name b) (name c) (name d)) (par (proc-call (name prefix) (integer-literal 0) (name b) (name a)) (if (guarded (name use.seq.delta) (proc-call (name seq.delta) (name a) (name c) (name d))) (guarded true (proc-call (name delta) (name a) (name c) (name d)))) (proc-call (name succ) (name c) (name b)) (proc-call (name consume) (integer-literal 1000000) (name d) (name screen))))))) main)))
